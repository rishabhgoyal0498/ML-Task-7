from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris

# Load the Iris dataset as an example
iris = load_iris()
X, y = iris.data, iris.target

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# The 'test_size' parameter determines the proportion of the dataset to include in the test split.
# 'random_state' is a seed for reproducibility, ensuring that the split is the same every time you run the code.

# Now, you can use X_train and y_train to train your machine learning model,
# and X_test and y_test to evaluate its performance.

# Example of using a machine learning model (you can replace this with your actual model)
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Create a KNeighborsClassifier model
model = KNeighborsClassifier()

# Train the model on the training set
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy on the test set: {accuracy}")
